# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-latest, macos-13, windows-11-arm ]
        build_type: [ Release, Debug ]
        c_compiler: [ gcc, clang, cl, emcc ]
        include:
          - os: windows-latest
            platform_name: Windows x86_64
            compiler_name: MSVC
            c_compiler: cl
            cpp_compiler: cl
          - os: windows-11-arm
            platform_name: Windows AArch64
            compiler_name: MSVC
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            platform_name: WASM
            compiler_name: Emscripten
            c_compiler: emcc
            cpp_compiler: em++
            build_settings: >
              --target LCE
            settings: >
              -DCMAKE_EXE_LINKER_FLAGS="--bind"
              -DEMSCRIPTEN_DIR="$/home/runner/work/libLCE/libLCE/external/emsdk/upstream/emscripten"
              -DCMAKE_TOOLCHAIN_FILE=/home/runner/work/libLCE/libLCE/external/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake
          - os: ubuntu-latest
            platform_name: Linux x86_64
            compiler_name: GCC
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            platform_name: Linux x86_64
            compiler_name: Clang
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-24.04-arm
            platform_name: Linux AArch64
            compiler_name: GCC
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-24.04-arm
            platform_name: Linux AArch64
            compiler_name: Clang
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            platform_name: macOS AArch64
            compiler_name: Clang
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            platform_name: macOS AArch64
            compiler_name: GCC
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-13
            platform_name: macOS x86_64
            compiler_name: Clang
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-13
            platform_name: macOS x86_64
            compiler_name: GCC
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: windows-latest
            c_compiler: emcc
          - os: windows-11-arm
            c_compiler: gcc
          - os: windows-11-arm
            c_compiler: clang
          - os: windows-11-arm
            c_compiler: emcc
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-24.04-arm
            c_compiler: cl
          - os: ubuntu-24.04-arm
            c_compiler: emcc
          - os: macos-latest
            c_compiler: emcc
          - os: macos-latest
            c_compiler: cl
          - os: macos-13
            c_compiler: emcc
          - os: macos-13
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up Emscripten
        if: matrix.c_compiler == 'emcc'
        run: |
          ./external/emsdk/emsdk install latest
          ./external/emsdk/emsdk activate latest
          source ./external/emsdk/emsdk_env.sh

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/cmake-build-${{ matrix.build_type }}-${{ matrix.c_compiler }}" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. CMAKE_BUILD_TYPE is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -S ${{ github.workspace }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          ${{ matrix.settings }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: >
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} ${{ matrix.build_settings }}

      - name: Upload Artifact (Linux)
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm'
        with:
          name: ${{ matrix.platform_name }}-${{ matrix.compiler_name }}_${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/cmake-build-${{ matrix.build_type }}-${{ matrix.c_compiler }}/*.so
            ${{ github.workspace }}/cmake-build-${{ matrix.build_type }}-${{ matrix.c_compiler }}/*.js
            ${{ github.workspace }}/cmake-build-${{ matrix.build_type }}-${{ matrix.c_compiler }}/*.wasm
            ${{ github.workspace }}/cmake-build-${{ matrix.build_type }}-${{ matrix.c_compiler }}/tests

      - name: Upload Artifact (macOS)
        uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
        with:
          name: ${{ matrix.platform_name }}-${{ matrix.compiler_name }}_${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/cmake-build-${{ matrix.build_type }}-${{ matrix.c_compiler }}/*.dylib
            ${{ github.workspace }}/cmake-build-${{ matrix.build_type }}-${{ matrix.c_compiler }}/tests

      - name: Upload Artifact (Windows)
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest' || matrix.os == 'windows-11-arm'
        with:
          name: ${{ matrix.platform_name }}-${{ matrix.compiler_name }}_${{ matrix.build_type }}
          path: ${{ github.workspace }}/cmake-build-${{ matrix.build_type }}-${{ matrix.c_compiler }}/${{ matrix.build_type }}

